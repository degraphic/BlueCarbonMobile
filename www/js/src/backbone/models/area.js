// Generated by CoffeeScript 1.4.0
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Models || (_base.Models = {});

  BlueCarbon.Models.Area = (function(_super) {

    __extends(Area, _super);

    function Area() {
      this.layerDownloaded = __bind(this.layerDownloaded, this);
      return Area.__super__.constructor.apply(this, arguments);
    }

    Area.prototype.schema = function() {
      return "id INTEGER, title TEXT, coordinates TEXT, mbtiles TEXT, error TEXT, PRIMARY KEY (id)";
    };

    Area.prototype.downloadData = function() {
      var ft, layer, _i, _len, _ref, _results,
        _this = this;
      _ref = this.get('mbtiles');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        ft = new FileTransfer();
        _results.push(ft.download(layer.url, this.filenameForLayer(layer), function(fileEntry) {
          return _this.layerDownloaded(layer, fileEntry);
        }, function(error) {
          alert("unable to download " + layer.habitat);
          return console.log(error);
        }));
      }
      return _results;
    };

    Area.prototype.filenameForLayer = function(layer) {
      return fs.root.fullPath + "/" + layer.habitat;
    };

    Area.prototype.layerDownloaded = function(layer, fileEntry) {
      var index, mbTiles, storedLayer, _i, _len;
      alert("Download succeeded");
      layer.downloadedAt = (new Date()).getTime();
      mbTiles = this.get('mbtiles');
      for (storedLayer = _i = 0, _len = mbTiles.length; _i < _len; storedLayer = ++_i) {
        index = mbTiles[storedLayer];
        if (storedLayer.habitat === layer.habitat) {
          mbTiles[index] = layer;
        }
      }
      this.set('mbtiles', mbTiles);
      return this.localSave();
    };

    Area.prototype.downloadState = function() {
      return "ready";
    };

    return Area;

  })(Backbone.SyncableModel);

}).call(this);
