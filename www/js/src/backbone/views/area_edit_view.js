// Generated by CoffeeScript 1.4.0
(function() {
  var _base,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BlueCarbon || (window.BlueCarbon = {});

  (_base = window.BlueCarbon).Views || (_base.Views = {});

  BlueCarbon.Views.AreaEditView = (function(_super) {

    __extends(AreaEditView, _super);

    function AreaEditView() {
      this.render = __bind(this.render, this);
      return AreaEditView.__super__.constructor.apply(this, arguments);
    }

    AreaEditView.prototype.template = JST['area/edit'];

    AreaEditView.prototype.events = {
      "touchstart #new-validation": "fireAddValidation",
      "touchstart .ios-head .back": "fireBack"
    };

    AreaEditView.prototype.initialize = function(options) {
      this.area = options.area;
      this.map = options.map;
      this.validationList = new BlueCarbon.Collections.Validations([], {
        area: this.area
      });
      this.validationList.on('reset', this.render);
      this.validationList.localFetch();
      return this.subViews = [];
    };

    AreaEditView.prototype.fireAddValidation = function() {
      return this.trigger('addValidation', {
        area: this.area
      });
    };

    AreaEditView.prototype.fireBack = function() {
      return this.trigger('back');
    };

    AreaEditView.prototype.render = function() {
      var _this = this;
      this.$el.html(this.template({
        area: this.area
      }));
      this.validationList.each(function(validation) {
        var validationView;
        validationView = new BlueCarbon.Views.ValidationView({
          validation: validation
        });
        $('#validation-list').append(validationView.render().el);
        return _this.subViews.push(validationView);
      });
      this.addMapLayers();
      return this;
    };

    AreaEditView.prototype.addMapLayers = function() {
      var db, layer, tileLayer, _i, _len, _ref, _results;
      this.removeTileLayers();
      this.tileLayers || (this.tileLayers = []);
      _ref = this.area.tileLayers();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        console.log("adding tile layer for " + layer.mbtileLocation);
        db = window.sqlitePlugin.openDatabase(layer.mbtileLocation, "1.0", "Tiles", 2000000);
        tileLayer = new L.TileLayer.MBTiles(db, {
          tms: true
        }).addTo(this.map);
        _results.push(this.tileLayers.push(tileLayer));
      }
      return _results;
    };

    AreaEditView.prototype.removeTileLayers = function() {
      var layer, _i, _len, _ref, _results;
      if (this.tileLayers == null) {
        return;
      }
      _ref = this.tileLayers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        layer = _ref[_i];
        _results.push(this.map.removeLayer(layer));
      }
      return _results;
    };

    AreaEditView.prototype.onClose = function() {
      var view, _i, _len, _ref;
      _ref = this.subViews;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        view = _ref[_i];
        view.close();
      }
      return this.removeTileLayers();
    };

    return AreaEditView;

  })(Backbone.View);

}).call(this);
